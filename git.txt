

查看帮助信息
git config --help

查看手册
man git-config

添加用户名
git config --global --add user.name cherry

查看列表
git config --list --global

删除用户名
git config --global --unset user.name cherry

给子命令或者参数起别名
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.st status
git config --global alias.ci commit


Git基本工作流程
git使用40个16进制字符的sha-1 hash来标识对象

blob
tree
commit
tag

创建git工作区
git init
//创建Git版本库时，Git自动为我们创建了唯一一个master分支

取消git工作去
rm -rf .git

git clone

添加文件
git add
//把文件添加进去，实际上就是把文件修改添加到暂存区

进行提交
git commit
	-m '提交的信息'
//提交更改，实际上就是把暂存区的所有内容提交到当前分支
//需要提交的文件修改通通放到暂存区，然后一次性提交暂存区的所有修改


git status

查看文件差异
git diff

移动/重命名文件
git mv

忽略文件
gitignore

查看日志
git log
如果嫌输出信息太多，可以试试加上--pretty=oneline参数：
git log --pretty=oneline
记录你的每一次命令
git reflog



【回到过去的版本】
在Git中用HEAD表示当前版本
上一个版本就是HEAD^
上上一个版本就是HEAD^^
往上100个版本写成HEAD~100
git reset --hard HEAD^

【回到未来的版本】
git reset --hard 3628164（版本的commit ID）
版本号没必要写全，前几位就可以了，Git会自动去找。

【管理修改】
*Git管理的是修改，而不是文件
例如：第一次修改 -> git add -> 第二次修改 -> git commit
第二次的修改没有被提交，因为在工作区的第二次修改并没有放入暂存区
//如果想第二次修改也提交
第一次修改 -> git add -> 第二次修改 -> git add -> git commit



【撤销修改】
没有被放到暂存区
git checkout -- file
把暂存区的修改撤销掉，重新放回工作区
git reset HEAD file

//可以综合使用
git reset HEAD file
git checkout -- file


【删除文件】
git rm
只删除暂存区的文件，而不删除工作目录的文件
git rm --cached 文件名

//确认删除
git rm -> git commit
//删错了
git checkout -- test.txt

*如果一个文件已经被提交到版本库，那么你永远不用担心误删,但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

【远程仓库】
第1步：创建SSH Key
//在用户主目录下，看看有没有.ssh目录，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
ssh-keygen -t rsa -C "youremail@example.com"

第2步：登陆GitHub，打开"Account settings"，"SSH Keys"页面，点"Add SSH Key"，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
//GitHub需要SSH Key,是因为需要识别出你推送的提交确实是你推送的

【添加远程库】
要关联一个远程库
git remote add origin git@github.com:zhaizhaohui/repo-name.git
关联后，使用命令
git push -u origin master
//第一次推送master分支的所有内容
此后,每次本地提交后
git push origin master

*删除远程库
git remote rm origin

【从远程库克隆】
git clone git@github.com:zhaizhaohui/gitskills.git





【分支管理】
查看分支
git branch

创建分支
git branch <name>

切换分支
git checkout <name>

创建+切换分支
git checkout -b <name>

合并某分支到当前分支
git merge <name>

删除分支
git branch -d <name>

//分支就是科幻电影里面的平行宇宙
//一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master

解决冲突
//当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
//用git log --graph命令可以看到分支合并图

分支管理策略
//合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并
//而fast forward合并就看不出来曾经做过合并。
git merge --no-ff -m "merge with no-ff" dev

Bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

Feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

多人协作
查看远程库信息
git remote -v
//本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支
git push origin branch-name
//如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支
git checkout -b branch-name origin/branch-name
//本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联
git branch --set-upstream branch-name origin/branch-name；
//从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

【标签管理】
tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起

创建标签，默认为HEAD
git tag <name>
//也可以指定一个commit id
指定标签信息
git tag -a <tagname> -m "blablabla..."
用PGP签名标签
git tag -s <tagname> -m "blablabla..."
可以查看所有标签
git tag
推送一个本地标签
git push origin <tagname>
推送全部未推送过的本地标签
git push origin --tags
删除一个本地标签
git tag -d <tagname>
删除一个远程标签
git push origin :refs/tags/<tagname>

【自定义Git】
设置/修改用户名
git config --global user.name king
设置邮箱
git config --global user.email 3115516997@qq.com
忽略特殊文件
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理


【搭建Git服务器】
1、安装git
sudo apt-get install git
2、创建一个git用户，用来运行git服务
sudo adduser git
3、创建证书登录
把所有公钥(id_rsa.pub文件)导入到/home/git/.ssh/authorized_keys文件里，一行一个
4、初始化Git仓库
//先选定一个目录作为Git仓库(假定是/srv/sample.git)
sudo git init --bare sample.git
sudo chown -R git:git sample.git
5、禁用shell登录
第二步创建的git用户不允许登录shell，通过编辑/etc/passwd文件完成
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
6、克隆远程仓库
git clone git@server:/srv/sample.git

管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里
如果团队有几百号人，可以用Gitosis来管理公钥

管理权限
可以使用Gitolite
